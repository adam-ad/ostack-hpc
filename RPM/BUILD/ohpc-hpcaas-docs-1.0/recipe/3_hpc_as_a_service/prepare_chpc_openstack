
#!/bin/bash
# # FILE: prepare_chpc_openstack

#Set SELinux to permissive
setenforce 0
#Source the keystonerc_admin file
source ${HOME}/keystonerc_admin
openstack role list | grep -i baremetal_admin
role_exists=$?
if [ "${role_exists}" -ne "0" ]; then 
    openstack role create baremetal_admin
fi
openstack role list | grep -i baremetal_observer 
role_exists=$?
if [ "${role_exists}" -ne "0" ]; then
    openstack role create baremetal_observer
fi
systemctl restart openstack-ironic-api

yum install -y tftp-server syslinux-tftpboot xinetd

mkdir -p /tftpboot
chown -R ironic /tftpboot

#Configure tftp 
#Configure /etc/xinet.d/tftp
echo "service tftp" > /etc/xinetd.d/tftp
echo "{" >> /etc/xinetd.d/tftp
echo "  protocol        = udp" >> /etc/xinetd.d/tftp
echo "  port            = 69" >> /etc/xinetd.d/tftp
echo "  socket_type     = dgram" >> /etc/xinetd.d/tftp
echo "  wait            = yes" >> /etc/xinetd.d/tftp
echo "  user            = root" >> /etc/xinetd.d/tftp
echo "  server          = /usr/sbin/in.tftpd" >> /etc/xinetd.d/tftp
echo "  server_args     = -v -v -v -v -v --map-file /tftpboot/map-file /tftpboot" >> /etc/xinetd.d/tftp
echo "  disable         = no" >> /etc/xinetd.d/tftp
echo "  (*\#*) This is a workaround for Fedora, where TFTP will listen only on" >> /etc/xinetd.d/tftp
echo "  (*\#*) IPv6 endpoint, if IPv4 flag is not used." >> /etc/xinetd.d/tftp
echo "  flags           = IPv4" >> /etc/xinetd.d/tftp
echo "}" >> /etc/xinetd.d/tftp
systemctl restart xinetd
cp /var/lib/tftpboot/pxelinux.0 /tftpboot
cp /var/lib/tftpboot/chain.c32 /tftpboot
echo 're ^(/tftpboot/) /tftpboot/\2' > /tftpboot/map-file
echo 're ^/tftpboot/ /tftpboot/' >> /tftpboot/map-file
echo 're ^(^/) /tftpboot/\1' >> /tftpboot/map-file
echo 're ^([^/]) /tftpboot/\1' >> /tftpboot/map-file

sed --in-place "s|(*\#*)tftp_server=\$my_ip|tftp_server=${controller_ip}|" /etc/ironic/ironic.conf

sed --in-place "s|(*\#*)tftp_root=/tftpboot|tftp_root=/tftpboot|" /etc/ironic/ironic.conf
sed --in-place "s|(*\#*)ip_version=4|ip_version=4|" /etc/ironic/ironic.conf
sed --in-place "s|(*\#*)automated_clean=true|automated_clean=false|" /etc/ironic/ironic.conf

sed --in-place "s|(*\#*)scheduler_use_baremetal_filters=false|scheduler_use_baremetal_filters=true|" \

sed --in-place "s|reserved_host_memory_mb=512|reserved_host_memory_mb=0|" /etc/nova/nova.conf
sed --in-place "s|(*\#*)scheduler_host_subset_size=1|scheduler_host_subset_size=9999999|" /etc/nova/nova.conf

# Enable meta data
# Edit /etc/neutron/dhcp_agent.ini
sed --in-place "s|enable_isolated_metadata\ =\ False|enable_isolated_metadata\ =\ True|" /etc/neutron/dhcp_agent.ini
sed --in-place "s|(*\#*)force_metadata\ =\ false|force_metadata\ =\ True|" \ /etc/neutron/dhcp_agent.ini

#(*\#*)(*\#*)(*\#*)(*\#*)
# Enable internal dns for hostname resolution, if it already not set
# manipulating configuration file via shell, alternate is to use openstack-config (TODO)
#(*\#*)(*\#*)(*\#*)
# setup dns domain first
if grep -q "^dns_domain.*openstacklocal$" /etc/neutron/neutron.conf; then
   sed -in-place  "s|^dns_domain.*|dns_domain = oslocal|" /etc/neutron/neutron.conf
else
   if ! grep -q "^dns_domain" neutron.conf; then
       sed -in-place  "s|^(*\#*)dns_domain = openstacklocal$|dns_domain = oslocal|" /etc/neutron/neutron.conf
   fi
fi
# configure ml2 dns driver for neutron
ml2file=/etc/neutron/plugins/ml2/ml2_conf.ini
if ! grep -q "^extension_drivers" $ml2file; then
    (*\#*) Assuming there is a place holder in comments, replace that string
    sed -in-place  "s|^(*\#*)extension_drivers.*|extension_drivers = port_security,dns|" $ml2file
else
    (*\#*) Entry is present, check if dns is already present, if not then enable
    if ! grep "^extension_drivers" $ml2file|grep -q dns; then
        current_dns=`grep "^extension_drivers" $ml2file`
        new_dns="$current_dns,dns"
        sed -in-place  "s|^extension_drivers.*|$new_dns|" $ml2file
    fi
fi

systemctl restart neutron-dhcp-agent
systemctl restart neutron-openvswitch-agent
systemctl restart neutron-metadata-agent
systemctl restart neutron-server
systemctl restart openstack-nova-scheduler
systemctl restart openstack-nova-compute
systemctl restart openstack-ironic-conductor

# # 
