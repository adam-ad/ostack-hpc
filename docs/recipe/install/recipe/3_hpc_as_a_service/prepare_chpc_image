
#!/bin/bash
# # File: prepare_chpc_image
# Set cloud image path 
CHPC_CLOUD_IMAGE_PATH=/opt/ohpc/admin/images/cloud/

# function to install diskimage-builder
function setup_dib() {
#   Install diskimage-builder 
    yum -y install diskimage-builder PyYAML
#   Install grub dependency 
    yum -y install parted
#   Fix for group install
    yum -y install <DIB patch>
} # end of function

# function to setup dib environment setup_dib_hpc_base
function setup_dib_hpc_base() {
#   Install dib if it is not already installed
    setup_dib
#   diskimage-builder initial config
    export DIB_DEV_USER_USERNAME=chpc
    export DIB_DEV_USER_PASSWORD=intel8086
    export DIB_DEV_USER_PWDLESS_SUDO=1
#   Add custom elements in DIB
    export ELEMENTS_PATH="$(realpath ../../dib/hpc/elements)"
#   Add path to HPC specific files
    export DIB_HPC_FILE_PATH="$(realpath ../../dib/hpc/hpc-files/)"
#   Set DIB Element
    export DIB_ HPC_BASE="ohpc"
#   Check package installed
    yum -y install ${ohpc_pkg}
#   Export to DIB
    export DIB_HPC_OHPC_PKG=${ohpc_pkg}
#    Create listof elements
    DIB_HPC_ELEMENTS="hpc-env-base"
} # end of the function

# function to prepare deploy images
function prepare_deploy_image() {
   if [[ ${chpc_create_new_image} -ne 1 ]] && [[ -s $chpc_image_deploy_kernel ]] && [[ -s $chpc_image_deploy_ramdisk ]]; then
       # need to create an image, image is provided by user
       echo "Skiping cloud deploy-image build, Image provided:"
       echo "Deploy ramdisk Image:$chpc_image_deploy_ramdisk"
       # Store Images file
       CHPC_IMAGE_DEST=$CHPC_CLOUD_IMAGE_PATH/$(basename $chpc_image_deploy_kernel)
          if [[ ! -e $CHPC_IMAGE_DEST ]]; then
          sudo cp -f $chpc_image_deploy_kernel $CHPC_CLOUD_IMAGE_PATH/
       fi
       chpc_image_deploy_kernel=$CHPC_IMAGE_DEST
       CHPC_IMAGE_DEST=$CHPC_CLOUD_IMAGE_PATH/$(basename $chpc_image_deploy_ramdisk)
       if [[ ! -e $CHPC_IMAGE_DEST ]]; then
          sudo cp -f $chpc_image_deploy_ramdisk $CHPC_CLOUD_IMAGE_PATH/
       fi
       chpc_image_deploy_ramdisk=$CHPC_IMAGE_DEST
   else
       echo "Building new Cloud Deploy Image"
       echo "====================================================================="
       echo "=== Preparing cloud-hpc deploy images for ironic====================="
       echo "====================================================================="
       # prepare deploy images
       # Install dib if it is not already installed
       setup_dib
       # Unset any previos envirnment flag
       unset DIB_YUM_REPO_CONF   
       #  Install git if it is not already installed
       yum -y install git
       disk-image-create ironic-agent centos7 -o icloud-hpc-deploy-c7
       echo "====================================================================="
       echo "=== cloud-hpc deploy images Complete ================================"
       echo "====================================================================="
       chpc_image_deploy_kernel="$( realpath icloud-hpc-deploy-c7.kernel)"
       chpc_image_deploy_ramdisk="$( realpath icloud-hpc-deploy-c7.initramfs)"
       # Store Images file
       mkdir -p $CHPC_CLOUD_IMAGE_PATH/
       sudo mv -f $chpc_image_deploy_kernel $CHPC_CLOUD_IMAGE_PATH/
       chpc_image_deploy_kernel=$CHPC_CLOUD_IMAGE_PATH/$(basename $chpc_image_deploy_kernel)
       sudo mv -f $chpc_image_deploy_ramdisk $CHPC_CLOUD_IMAGE_PATH/
       chpc_image_deploy_ramdisk=$CHPC_CLOUD_IMAGE_PATH/$(basename $chpc_image_deploy_ramdisk)
    fi
} # end of function

# function to prepare head node
function prepare_sms_image() {
    if [[ ${chpc_create_new_image} -ne 1 ]] && [[ -s $chpc_image_sms ]]; then
        # No need to create an image, image is provided by user
        echo -n "Skiping cloud sms-image build, Image provided:"
        echo "$chpc_image_sms"
        CHPC_IMAGE_DEST=$CHPC_CLOUD_IMAGE_PATH/$(basename $chpc_image_sms)
        if [[ ! -e $CHPC_IMAGE_DEST ]]; then
            sudo cp $chpc_image_sms $CHPC_CLOUD_IMAGE_PATH
        fi
        chpc_image_sms=$CHPC_IMAGE_DEST
    else
        # setup environment varioable to indicate sms image type
        export DIB\_HPC\_IMAGE\_TYPE=sms
        DIB\_HPC\_ELEMENTS+=" hpc-slurm"
        if [[ \$\{enable\_mrsh\} -eq 1 ]];then
            DIB\_HPC\_ELEMENTS+=" hpc-mrsh"
        fi
        export DIB\_HPC\_COMPILER="gnu"
        export DIB\_HPC\_MPI="openmpi mvapich2"
        export DIB\_HPC\_PERF\_TOOLS="perf-tools"
        export DIB\_HPC\_3RD\_LIBS="serial-libs parallel-libs io-libs python-libs runtimes"
        DIB\_HPC\_ELEMENTS+=" hpc-dev-env"
        disk-image-create centos7 vm local-config dhcp-all-interfaces devuser \
        chpc_image_sms="$( realpath icloud-hpc-cent7.qcow2)"
        mkdir -p $CHPC_CLOUD_IMAGE_PATH
        mv -f \$chpc\_image\_sms \$CHPC\_CLOUD\_IMAGE\_PATH
        chpc\_image\_sms=\$CHPC\_CLOUD\_IMAGE\_PATH/\$(basename \$chpc\_image\_sms)
    fi # end of else of or if
} # end of function

# function to prepare head node
function prepare_user_image() {
   if [[ ${chpc_create_new_image} -ne 1 ]] && [[ -s $chpc_image_user ]]; then
      # No need to create an image, image is provided by user
      echo -n "Skiping cloud user-image build, Image provided:"
      echo "$chpc_image_user"
      CHPC_IMAGE_DEST=$CHPC_CLOUD_IMAGE_PATH/$(basename $chpc_image_user)
      if [[ ! -e $CHPC_IMAGE_DEST ]]; then
         sudo cp $chpc_image_user $CHPC_CLOUD_IMAGE_PATH
      fi
      chpc_image_user=$CHPC_IMAGE_DEST
   else
      export DIB_HPC_IMAGE_TYPE=compute
      DIB_HPC_ELEMENTS+=" hpc-slurm"
      if [[ ${enable_mrsh} -eq 1 ]];then
          DIB_HPC_ELEMENTS+=" hpc-mrsh"
      fi
      disk-image-create centos7 vm local-config dhcp-all-interfaces devuser \
      chpc_image_sms="$( realpath icloud-hpc-cent7.qcow2)"
      mkdir -p $CHPC_CLOUD_IMAGE_PATH
      mv -f $chpc_image_user$CHPC_CLOUD_IMAGE_PATH
      chpc_image_user=$CHPC_CLOUD_IMAGE_PATH/$(basename $chpc_image_sms)
    fi # end of else of or if
} # end of function

# Build HPC user image
echo "########################################################################"
echo "########################### Starting SMS Image   ###########################"
echo "########################################################################"
prepare\_sms\_image
echo $chpc_image_sms
echo "########################################################################"
echo "########################### sms image is done ##########################"
echo "########################################################################"
prepare\_user\_image
echo $chpc_image_user
echo "########################################################################"
echo "########################## user image is done ##########################"
echo "########################################################################"
prepare\_deploy\_image
echo $chpc_image_deploy_kernel
echo $chpc_image_deploy_ramdisk
echo "########################################################################"
echo "######################### deploy image is done #########################"
echo "########################################################################"

# #   
