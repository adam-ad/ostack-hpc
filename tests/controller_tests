#!/bin/bash

#Roadmap:
#	Is locate installed?
#	Find RPM for test-suite-chpc
#	Are there more than one?
#	Run root test script on controller
#		Push to sms node
#		Get name of SMS node from inventory file
#		push test-suite-chpc rpm to sms node
#		push bash script to sms node
#			Install test-suite-chpc
#			cd to tests dir
#			run root tests
#			su - user
#			run user tests
#			exit


# We need a 'locate' executable
if [[ ! -e /bin/locate ]]; then
	yum install -y mlocate
fi
updatedb

TESTPKG_EXISTS=`locate test-suite-chpc |grep -i '.rpm$' |grep -v src | wc -l`
TESTPKG=
INV_FILE=/root/inventory
SMS_NAME=10.23.182.168
#SMS_NAME=<<THIS DOSENT WORK- sms-name is declared in input, not inventory, and the name doens't match the sms name installed here.>>
SMS_TEST=./sms_tests.sh

for i in perl-Test-Harness perl-XML-Generator; do
yum downloader $i /tmp
scp $i $SMS_NAME:/tmp/
done

case "$TESTPKG_EXISTS" in
        0)
            echo "You appear not to have the rpm for the test-suite-chpc..rpm available"
	    echo "Please copy the rpm to a locally accesible drive and rerun this test."
 	    echo "If your file is in /tmp, move or copy it to a user directory."
	    echo " /tmp is considered volatile, and not searched. "
	    exit	
            ;;
         
        1)
            TESTPKG=`locate test-suite-chpc |grep -i '.rpm$' |grep -v src`
            ;;
         
        *)
            echo "Either there was a problem with 'locate', or you have multiple versions of the test package available."
	    echo "Here's a list of what was found:"
	    locate test-suite-chpc |grep -i '.rpm$' |grep -v src  
	    exit
            ;;
esac

scp $TESTPKG $SMS_NAME:/tmp/
scp $SMS_TEST $SMS_NAME:/tmp/

ERROR () {
    echo "[ERROR]: $1" >&2
    exit 1
}

USAGE () {
    echo " "
    echo "Usage: run-tests [-r|-u|-l]"
    echo " "
    echo "   -r  include root-level tests"
    echo "   -u  include user-level tests"
    echo "   -l  enable long version user-level tests (requires -u)"
    echo "   -s  enables cloud hpc tests executed from sms node in cloud  (requires -s)"
    echo "   -o  enables OpenStack integration tests executed from openstack controller (requires -o)"
    echo " "
    echo "   The default is to run short user level tests only (-u)."
    echo " "
    exit 1
}

# Lookup sms server from inventory file



setup_tests()
{
    #bootstrap
    configure
    # run input.local to get input parameters
    load common/test_helper_functions || exit 1
    source common/functions || exit 1
    
    if [ -s common/TEST_ENV ];then
        source common/TEST_ENV
    fi
    
}
run_dib_tests()
{
    pushd dib
    make check
}
run_controller_tests()
{
    # bootstrap
    # configure
    pushd ostack
    make check
}

run_chpc_sms_tests()
{
    # copy all tests to sms node
    # ssh to sms node
    # run tests
    # return results	
	echo "Hello"
}

run_user_level_tests()
{
    echo " "
    echo "Running User-Level Tests"
    echo " "

    cd ${TEST_DIR} || ERROR "Unable to access top level test directory"

    export BATS_JUNIT_GROUP="UserLevelTests"

    local config_opts=""
    if [ "${EnableLongTests}" == "true" ];then
        config_opts="--enable-long"
    fi

    # create execution test script
    cat <<EOF > ${TEST_USER_SCRIPT}
#!/bin/bash
export BATS_ENABLE_TIMING=1
export BATS_JUNIT_FORMAT=1
export BATS_JUNIT_GROUP="UserLevelTests"
export AUTOMAKE_JUNIT_FILE=1

cd "$TEST_DIR/" || exit 1
#[[ -f Makefile ]] && make clean && make distclean
#./bootstrap || exit 1
./configure $config_opts || exit 1
make -k VERBOSE=1 check
EOF

    sudo chown -fR ${TEST_USER}: ${TEST_DIR} || ERROR "Unable to update perms for ${TEST_DIR}"
    sudo chown -fR ${TEST_USER}: ${TEST_USER_SCRIPT} || ERROR "Unable to update perms for ${TEST_USER_SCRIPT}"
    sudo su - ${TEST_USER} ${TEST_USER_SCRIPT}
 
    USER_STATUS=$?
    cd - >& /dev/null
    return $USER_STATUS
}

TEST_DIR=${TESTSUITE_DIR}
TEST_USER=${TESTSUITE_USER}
TEST_USER_SCRIPT="/tmp/user_integration_tests"

# clear options
RootLevelTests=false
UserLevelTests=false
EnableLongTests=false
OControllerTests=false
ChpcSmsTests=false

# get options
while getopts "rul" opt; do
    case $opt in
        r)
            RootLevelTests=true
            ;;
        u)
            UserLevelTests=true
            ;;
        l)
            EnableLongTests=true
            ;;
        o)
            OControllerTests=true
            ;;
        s)
            ChpcSmsTests=true
            ;;
        *)
            USAGE
            ;;
    esac
done

# check options
if [ "${UserLevelTests}" == "false" ] && \
    ( [ "${RootLevelTests}" == "false" ] || \
      [ "${EnableLongTests}" == "true" ] ); then
    USAGE
fi

# launch tests
export BATS_JUNIT_FORMAT=1
export BATS_ENABLE_TIMING=1
export AUTOMAKE_JUNIT_FILE=1

echo " "
echo "Cloud HPC Test Configuration:"
echo " "
echo "    Root Level Testing = ${RootLevelTests}"
echo "    User Level Testing = ${UserLevelTests}"
echo "    OpenStack Controller Tests = ${OControllerTests}"
echo "    Cloud HPC SMS Tests = ${ChpcSmsTests}"

echo "    Enable Long Tests  = ${EnableLongTests}"


#-----------------
# tests execution
#-----------------

uid=$(id -u)

if [ "${RootLevelTests}" == "true" ];then
    [ $uid -eq 0 ] || ERROR "Only root may run root level tests"
    time run_root_level_tests
fi

if [ "${OControllerTests}" == "true" ];then
    time run_controller_tests
fi

if [ "${ChpcSmsTests}" == "true" ];then
    time run_chpc_sms_tests
fi

if [ "${UserLevelTests}" == "true" ];then
    time run_user_level_tests
fi
