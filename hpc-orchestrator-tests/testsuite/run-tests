#!/bin/bash

ERROR () {
    echo "[ERROR]: $1" >&2
    exit 1
}

USAGE () {
    echo " "
    echo "Usage: run-tests [-r|-u|-l]"
    echo " "
    echo "   -r  include root-level tests"
    echo "   -u  include user-level tests"
    echo "   -l  enable long version user-level tests (requires -u)"
    echo " "
    echo "   The default is to run short user level tests only (-u)."
    echo " "
    exit 1
}

# load modules
if [ -z "$MODULEPATH" ]; then
    . /etc/profile.d/lmod.sh || exit 1
fi
module purge                 || exit 1
module load hpc-orchestrator || exit 1
module load testsuite        || exit 1
module load autotools        || exit 1

TEST_DIR=${TESTSUITE_DIR}
TEST_USER=${TESTSUITE_USER}
TEST_USER_SCRIPT="/tmp/user_integration_tests"

# clear options
RootLevelTests=false
UserLevelTests=false
EnableLongTests=false

# get options
while getopts "rul" opt; do
    case $opt in
        r)
            RootLevelTests=true
            ;;
        u)
            UserLevelTests=true
            ;;
        l)
            EnableLongTests=true
            ;;
        *)
            USAGE
            ;;
    esac
done

# check options
if [ "${UserLevelTests}" == "false" ] && \
    ( [ "${RootLevelTests}" == "false" ] || \
      [ "${EnableLongTests}" == "true" ] ); then
    USAGE
fi

# launch tests
export BATS_JUNIT_FORMAT=1
export BATS_ENABLE_TIMING=1
export AUTOMAKE_JUNIT_FILE=1

echo " "
echo "HPC Orchestrator Integration Test Configuration:"
echo " "
echo "    Root Level Testing = ${RootLevelTests}"
echo "    User Level Testing = ${UserLevelTests}"
echo "    Enable Long Tests  = ${EnableLongTests}"

run_root_level_tests()
{
    echo " "
    echo "Running Root-Level Tests"
    echo " "

    service ipmi start || ERROR "Unable to start ipmi"
    echo `pwd`
    cd ${TEST_DIR} || ERROR "Unable to access top level test directory"

    export BATS_JUNIT_GROUP="RootLevelTests"

    if [[ "$BaseOS" == "centos7.1" || "$BaseOS" == "centos7.2" ]];then
        perl -pi -e "s#BOS_RELEASE=\S+#BOS_RELEASE=centos-release#" TEST_ENV
    elif [[ "$BaseOS" == "rhel7.2" ]];then
        perl -pi -e "s#BOS_RELEASE=\S+#BOS_RELEASE=redhat-release#" TEST_ENV
    fi

    local config_opts=""
    if mount | grep "type lustre" &>/dev/null;then
	source <(grep LUSTRE_TEST_PATH TEST_ENV) &>/dev/null
	[[ -d ${LUSTRE_TEST_PATH} ]] && config_opts="--enable-lustre"
    fi
    
    #[[ -f Makefile ]] && make clean && make distclean
    #./bootstrap || ERROR "Unable to bootstrap root-level tests"
    ./configure ${config_opts} || ERROR "Unable to configure root-level tests"
    make -k check

    ROOT_STATUS=$?
    cd - >& /dev/null
    return $ROOT_STATUS
}

run_user_level_tests()
{
    echo " "
    echo "Running User-Level Tests"
    echo " "

    cd ${TEST_DIR} || ERROR "Unable to access top level test directory"

    export BATS_JUNIT_GROUP="UserLevelTests"

    local config_opts=""
    if [ "${EnableLongTests}" == "true" ];then
        config_opts="--enable-long"
    fi

    # create execution test script
    cat <<EOF > ${TEST_USER_SCRIPT}
#!/bin/bash
export BATS_ENABLE_TIMING=1
export BATS_JUNIT_FORMAT=1
export BATS_JUNIT_GROUP="UserLevelTests"
export AUTOMAKE_JUNIT_FILE=1

cd "$TEST_DIR/" || exit 1
#[[ -f Makefile ]] && make clean && make distclean
#./bootstrap || exit 1
./configure $config_opts || exit 1
make -k VERBOSE=1 check
EOF

    sudo chown -fR ${TEST_USER}: ${TEST_DIR} || ERROR "Unable to update perms for ${TEST_DIR}"
    sudo chown -fR ${TEST_USER}: ${TEST_USER_SCRIPT} || ERROR "Unable to update perms for ${TEST_USER_SCRIPT}"
    sudo su - ${TEST_USER} ${TEST_USER_SCRIPT}
 
    USER_STATUS=$?
    cd - >& /dev/null
    return $USER_STATUS
}

#-----------------
# tests execution
#-----------------

uid=$(id -u)

if [ "${RootLevelTests}" == "true" ];then
    [ $uid -eq 0 ] || ERROR "Only root may run root level tests"
    time run_root_level_tests
fi

if [ "${UserLevelTests}" == "true" ];then
    time run_user_level_tests
fi
