#!/bin/bash

#validateIpInput () {
#}
function validateInputFile () {
    if [[ -z "${inputFile}" || ! -e "${inputFile}" ]];then
      echo "Error: Unable to access local input file -> \"${inputFile}\""
      exit 1
    else
      . ${inputFile} || { echo "Error sourcing ${inputFile}"; exit 1; }
    fi
    _BADCOUNT=0
    
    for((i=0; i<${#c_ip[@]}; i++)) ; do
      if ! [[ ${c_ip[i]} =~ ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([\
                                0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$ ]]; then
        echo "ERROR: Invalid IP address #$i: ${c_ip[i]}"
        _BADCOUNT=$((_BADCOUNT+1))
      fi
      if ! [[ ${c_bmc[i]} =~ ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([\
                                 0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$ ]]; then
        echo "ERROR: Invalid BMC IP address #$i: ${c_bmc[i]}"
        _BADCOUNT=$((_BADCOUNT+1))
      fi
      if ! [[ `echo ${c_mac[i]^^} | egrep "^([0-9A-F]{2}:){5}[0-9A-F]{2}$"` ]]; then
        echo "ERROR: Invalid MAC address #$i: ${c_mac[i]}"
        _BADCOUNT=$((_BADCOUNT+1))
      fi
    done
    
    [[ $_BADCOUNT -eq 0 ]] || exit 3

    #validateIpInput $nodename_prefix
}

function validateHpcInventory() {
    if [[ -z "${cloudHpcInventory}" || ! -e "${cloudHpcInventory}" ]];then
      echo "Error: Unable to access Cloud hpc inventory file -> \"${cloudHpcInventory}\""
      exit 1
    else
      . ${cloudHpcInventory} || { echo "Error sourcing ${cloudHpcInventory}"; exit 1; }
    fi
    #Verify Cloud IP. Move this to common function validateIpInput
    _BADCOUNT=0
    
    for((i=0; i<${#cc_ip[@]}; i++)) ; do
      if ! [[ ${cc_ip[i]} =~ ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([\
                                0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$ ]]; then
        echo "ERROR: Invalid IP address #$i: ${cc_ip[i]}"
        _BADCOUNT=$((_BADCOUNT+1))
      fi
      if ! [[ ${cc_bmc[i]} =~ ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([\
                                 0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$ ]]; then
        echo "ERROR: Invalid BMC IP address #$i: ${cc_bmc[i]}"
        _BADCOUNT=$((_BADCOUNT+1))
      fi
      if ! [[ `echo ${cc_mac[i]^^} | egrep "^([0-9A-F]{2}:){5}[0-9A-F]{2}$"` ]]; then
        echo "ERROR: Invalid MAC address #$i: ${cc_mac[i]}"
        _BADCOUNT=$((_BADCOUNT+1))
      fi
    done
    #validateIpInput $cnodename_prefix
}

function setup_hosts () {
    # first search if nodes are already configured. if yes then do not configure again, so that it can be re-run
    hpc_tag="#### Cloud-HPC nodes entry, entered by HPC Orchestrator ####"
    #if ! grep -Pq "^$hpc_tag" /etc/hosts; then
    if ! grep -Fq "$hpc_tag" /etc/hosts; then
        echo $hpc_tag >> /etc/hosts
    fi
    #check if sms_name is already configured, if not then add sms entry
    if ! grep -Fq ${sms_name} /etc/hosts; then
        echo -e "${sms_ip}\t${sms_name}" >> /etc/hosts
    fi
    for ((i=0; i<$num_computes; i++)) ; do
       if ! grep -Fq "${cc_name[$i]}" /etc/hosts; then
           echo -e "${cc_ip[$i]}\t${cc_name[$i]}"
       fi
    done >> /etc/hosts
}

function setup_cname () {
    # Determine number of computes and their hostnames
    export num_computes=${num_computes:-${#c_ip[@]}}
    for((i=0; i<${num_computes}; i++)) ; do
       c_name[$i]=${nodename_prefix}$((i+1))
    done
    export c_name
}

function setup_ccname() {
    export num_ccomputes=${num_ccomputes:-${#cc_ip[@]}}
    for((i=0; i<${num_ccomputes}; i++)) ; do
       cc_name[$i]=${cnodename_prefix}$((i+1))
    done
    export cc_name
}

function setup_computename() {
    setup_cname
    setup_ccname
}
